//
//  MapSearchViewController.swift
//  CleanFlickr
//
//  Created by Iñigo on 24/08/2018.
//  Copyright (c) 2018 Iñigo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapSearchDisplayLogic: class
{
  func displayFetchedPhotos(viewModel: MapSearch.FetchPhotos.ViewModel)
}

class MapSearchViewController: UIViewController, MapSearchDisplayLogic, UISearchBarDelegate, MKMapViewDelegate
{

  var interactor: MapSearchBusinessLogic?
  var router: (NSObjectProtocol & MapSearchRoutingLogic & MapSearchDataPassing)?
  var displayedPhotos: [MapSearch.FetchPhotos.ViewModel.DisplayedPhoto] = []
  var selectedPhoto: MapSearch.FetchPhotos.ViewModel.DisplayedPhoto?
  var sv: UIView?
    
  @IBOutlet weak private var searchBar: UISearchBar!
  @IBOutlet weak private var mapView: MKMapView!
  private var showingPhoto = false

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MapSearchInteractor()
    let presenter = MapSearchPresenter()
    let router = MapSearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        searchBar.delegate = self
        mapView.delegate = self
        NotificationCenter.default.addObserver(self, selector: #selector(notification(_:)), name:  NSNotification.Name.init("noConnection"), object: nil)
    }
  
    //MARK: - UISearchBarDelegate methods
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.displaySpinner()
        searchBar.endEditing(true)
        let coordinates = calculateFrame(mapView: mapView)
        fetchPhotos(searchText: searchBar.text!, bbox: "&bbox=" + String(coordinates[0]) + "%2C" + String(coordinates[1]) + "%2C" + String(coordinates[2]) + "%2C" + String(coordinates[3]))
    }
    
    //MARK: - MKMapViewDelegate methods
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        let pinView = MKAnnotationView(annotation: annotation, reuseIdentifier: nil)
        if let p = annotation as? MapSearch.FetchPhotos.ViewModel.DisplayedPhoto{
            pinView.image = p.image
        }
        pinView.canShowCallout = true
        return pinView
    }
    
    func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        
        if showingPhoto {
            return
        }
        let coordinates = calculateFrame(mapView: mapView)
        fetchPhotos(searchText: searchBar.text!, bbox: "&bbox=" + String(coordinates[0]) + "%2C" + String(coordinates[1]) + "%2C" + String(coordinates[2]) + "%2C" + String(coordinates[3]))
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        if let p = view.annotation as? MapSearch.FetchPhotos.ViewModel.DisplayedPhoto
        {
          self.selectedPhoto = p
          performSegue(withIdentifier: "PhotoDetail", sender: nil)
        }
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    /**
     
     A helper function to calculate the bounding box coordinate values that later on will be sent to the flickr api
     
     - parameters:
     - mapView: the MKMapView currently on display
     
     - returns:
     An array of doubles with min and max longitudes and latitudes for the flick search api bbox parameter
     
     */
    
    func calculateFrame(mapView: MKMapView)-> [Double] {
        let minLongitude = mapView.region.center.longitude - (mapView.region.span.longitudeDelta/2)
        let minLatitude = mapView.region.center.latitude - (mapView.region.span.latitudeDelta/2)
        let maxLongitude = mapView.region.center.longitude + (mapView.region.span.longitudeDelta/2)
        let maxLatitude = mapView.region.center.latitude + (mapView.region.span.latitudeDelta/2)
        return [minLongitude, minLatitude, maxLongitude, maxLatitude]
    }
    
    //MARK: - Notification handler
    
    @objc func notification(_ notification: Notification)  {
        if notification.name.rawValue == "noConnection"{
            let alert = UIAlertController(title: "No internet connection", message: "Please check your settings and try again later", preferredStyle: .alert)
            let action = UIAlertAction(title: "OK", style: .cancel)
            alert.addAction(action)
            self.removeSpinner()
            self.present(alert, animated: true, completion: nil)
        }
    }
  
  func fetchPhotos(searchText: String, bbox: String)
  {
    let request = MapSearch.FetchPhotos.Request()
    interactor?.fetchPhotos(searchText: searchText, bbox: bbox, request: request)
  }
  
  func displayFetchedPhotos(viewModel: MapSearch.FetchPhotos.ViewModel)
  {
    mapView.removeAnnotations(mapView.annotations)
    for dp in viewModel.displayedPhotos
    {
        mapView.addAnnotation(dp)
    }
     self.removeSpinner()
  }
    
    // MARK: - Activity indicator
    
    func displaySpinner() {
        self.sv = UIView(frame: self.view.bounds)
        guard let sv = sv else {return }
        sv.backgroundColor = UIColor.init(red: 0.5, green: 0.5, blue: 0.5, alpha: 0.5)
        let ai = UIActivityIndicatorView(activityIndicatorStyle: .whiteLarge)
        ai.startAnimating()
        ai.center = sv.center
        
        DispatchQueue.main.async {
            sv.addSubview(ai)
            self.view.addSubview(sv)
        }
    }

    func removeSpinner() {
        DispatchQueue.main.async {
            self.sv?.removeFromSuperview()
        }
    }
}
