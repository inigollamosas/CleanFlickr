//
//  PhotosWorkerTestsWorker.swift
//  CleanFlickr
//
//  Created by Iñigo on 27/08/2018.
//  Copyright (c) 2018 Iñigo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
@testable import CleanFlickr
import XCTest
import UIKit

class PhotosWorkerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: PhotosWorker!
    static var testPhotos: [Photo]!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupPhotosWorker()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupPhotosWorker()
    {
        sut = PhotosWorker(photosStore: PhotosAPISpy())
        
        PhotosWorkerTests.testPhotos = [Seeds.Photos.photo1, Seeds.Photos.photo2, Seeds.Photos.photo3]
    }
    
    // MARK: - Test doubles
    
    class PhotosAPISpy: PhotosAPI
    {
        // MARK: Method call expectations
        
        var fetchPhotosCalled = false
        
        // MARK: Spied methods
        override func fetchPhotos (searchText: String, bbox: String, completionHandler: @escaping (() throws -> [Photo]) -> Void)
        {
            fetchPhotosCalled = true
            DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) {
                completionHandler { () -> [Photo] in
                    return PhotosWorkerTests.testPhotos
                }
            }
        }
    }
    
    // MARK: - Tests
    
    func testFetchPhotosShouldReturnListOfPhotos()
    {
        // Given
        let photosAPISpy = sut.photosStore as! PhotosAPISpy

        // When
        var fetchedPhotos = [Photo]()
        let expect = expectation(description: "Wait for fetchPhotos() to return")
        sut.fetchPhotos(searchText: "", bbox: "", completionHandler: { (photos) in
            fetchedPhotos = photos
            expect.fulfill()
        })

        waitForExpectations(timeout: 3.0)

        // Then
        XCTAssert(photosAPISpy.fetchPhotosCalled, "Calling fetchPhotos() should ask the data store for a list of photos")
        XCTAssertEqual(fetchedPhotos.count, PhotosWorkerTests.testPhotos.count, "fetchPhotos() should return a list of photos")
        for photo in fetchedPhotos {
            XCTAssert(PhotosWorkerTests.testPhotos.contains(photo), "Fetched photos should match the photos in the data store")
        }
    }
}
