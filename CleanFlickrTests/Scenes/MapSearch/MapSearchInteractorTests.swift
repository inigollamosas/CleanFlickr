//
//  MapSearchInteractorTests.swift
//  CleanFlickr
//
//  Created by Iñigo on 27/08/2018.
//  Copyright (c) 2018 Iñigo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanFlickr
import XCTest

class MapSearchInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: MapSearchInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupMapSearchInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMapSearchInteractor()
  {
    sut = MapSearchInteractor()
  }
  
  // MARK: Test doubles
  
  class MapSearchPresentationLogicSpy: MapSearchPresentationLogic
  {
    var presentFetchedPhotosCalled = false
    
    func presentFetchedPhotos(response: MapSearch.FetchPhotos.Response)
    {
      presentFetchedPhotosCalled = true
    }
  }
  
  class PhotosWorkerSpy: PhotosWorker
  {
    // MARK: Method call expectations
    
    var fetchPhotosCalled = false
    
    // MARK: Spied methods
    override func fetchPhotos(searchText: String, bbox: String, completionHandler: @escaping ([Photo]) -> Void)
    {
        fetchPhotosCalled = true
        completionHandler([Seeds.Photos.photo1, Seeds.Photos.photo2, Seeds.Photos.photo3])
    }
  }
    
  // MARK: Tests
  
  func testFetchPhotos()
  {
    // Given
    let mapSearchPresentationLogicSpy = MapSearchPresentationLogicSpy()
    sut.presenter = mapSearchPresentationLogicSpy
    let photosWorkerSpy = PhotosWorkerSpy(photosStore: PhotosAPI())
    sut.photosWorker = photosWorkerSpy
    
    // When
    let request = MapSearch.FetchPhotos.Request()
    sut.fetchPhotos(searchText: Seeds.searchText, bbox: Seeds.bbox, request: request)
    
    // Then
    XCTAssert(mapSearchPresentationLogicSpy.presentFetchedPhotosCalled, "fetchPhotos() should ask the presenter to format the photos")
    XCTAssert(photosWorkerSpy.fetchPhotosCalled, "fetchPhotos() should ask PhotosWorker to fetch photos")
  }
}
